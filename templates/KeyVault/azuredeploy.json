{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "keyVaultName": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "KeyVault name"
            }
        },
        "tenantId": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
              "description": "Tenant Id of the subscription. Get using Get-AzureRmSubscription cmdlet or Get Subscription API"
            }
        },
        "accessPolicies": {
            "type": "array",
            "defaultValue": "{}",
            "metadata": {
                "description": "Access policies object {\"tenantId\":\"\",\"objectId\":\"\",\"permissions\":{\"keys\":[\"\"],\"secrets\":[\"\"]}}. Object Id of the AD user: get using Get-AzureRmADUser or Get-AzureRmADServicePrincipal cmdlets. Permissions to keys in the vault. Valid values are: all, create, import, update, get, list, delete, backup, restore, encrypt, decrypt, wrapkey, unwrapkey, sign, and verify."
            }
        },
        {{#if isDiagnosticsEnabled}}
        "logsRetentionInDays": {
            "type": "int",
            "defaultValue": 0,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Specifies the number of days that logs are gonna be kept. If you do not want to apply any retention policy and retain data forever, set value to 0."
            }
        },
        "diagnosticStorageAccountName": {
           "type": "string",
           "metadata": {
                "description": "Storage account name for diagnostics"
            }
        },
        {{#unless existingStorage}}
        "storageAccountType": {
            "type": "string",
            "allowedValues": ["Standard_LRS", "Standard_GRS", "Premium_LRS", "Standard_RAGRS", "Standard_ZRS"],
            "metadata": {
                "description": "Type of storage account for VM diagnostics."
            }
        },
        {{/unless}}
        {{/if}}
        {{#if createSecret}}
        "secretsObject": {
            "type": "secureObject",
            "defaultValue": "{}",
            "metadata": {
                "description": "all secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object"
            }
        },
        {{/if}}
        "enableVaultForDeployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies if the vault is enabled for deployment by script or compute (VM, Service Fabric, ...)"
            }
        },
        "enableVaultForTemplateDeployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies if the vault is enabled for a template deployment"
            }
        },
        "enableVaultForDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
            }
        },
        "vaultSku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Specifies the SKU for the vault"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": ""
            }
        }
    },
    "variables": {
    },
    "resources": [
        {{#if isDiagnosticsEnabled}}
        {{#unless existingStorage}}
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('diagnosticStorageAccountName')]",
            "apiVersion": "2016-12-01",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('storageAccountType')]"
            },
            "kind": "Storage",
            "tags": {
                "displayName": "concat('Key Vault ', parameters('keyVaultName'), ' diagnostics storage account')"
            },
            "properties": {}
        }{{#if isProtectWithLocks}},
        {
            "comments": "Resource lock on diagnostics storage account",
            "type": "Microsoft.Storage/storageAccounts/providers/locks",
            "name": "[concat(parameters('diagnosticStorageAccountName'), '/Microsoft.Authorization/storageDoNotDelete')]",
            "apiVersion": "2016-09-01",
            "properties": {
                "level": "CannotDelete"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('diagnosticStorageAccountName'))]"
            ]
        },
        {{/if}} {{!-- isProtectWithLocks  --}}
        {{/unless}} {{!-- existingStorage  --}}
        {{/if}} {{!-- isDiagnosticsEnabled  --}}
        {{#if isProtectWithLocks}}
        {
            "comments": "Resource lock on Key Vault",
            "type": "Microsoft.KeyVault/vaults/providers/locks",
            "name": "[concat(parameters('keyVaultName'), '/Microsoft.Authorization/keyVaultDoNotDelete')]",
            "apiVersion": "2016-09-01",
            "properties": {
                "level": "CannotDelete"
            },
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
            ]
        },
        {{/if}}
        {{#if createSecret}}
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/', parameters('secretsObject').secrets[copyIndex()].secretName)]",
            "apiVersion": "2015-06-01",
            "properties": {
                "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
            },
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
            ],
            "copy": {
                "name": "secretsCopy",
                "count": "[length(parameters('secretsObject').secrets)]"
            }
        },
        {{/if}}
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('keyVaultName')]",
            "apiVersion": "2016-10-01",
            "location": "[parameters('location')]",
            "properties": {
                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                {{#if enableSoftDelete}}
                "enableSoftDelete": true,
                {{/if}}
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": "[parameters('AccessPolicies')]",
                "sku": {
                    "name": "[parameters('vaultSku')]",
                    "family": "A"
                }
            }{{#if isDiagnosticsEnabled}},
            "resources": [
                {
                    "type": "Microsoft.KeyVault/vaults/providers/diagnosticsettings",
                    "name": "[concat(parameters('keyVaultName'), '/Microsoft.Insights/service')]",
                    "apiVersion": "2016-09-01",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"{{#unless existingStorage}},
                        "[concat('Microsoft.Storage/storageAccounts/', parameters('diagnosticStorageAccountName'))]"
                        {{/unless}}
                    ],
                    "properties": {
                        "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('diagnosticStorageAccountName'))]",
                        "logs": [
                            {
                                "category": "AuditEvent",
                                "enabled": true,
                                "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('LogsRetentionInDays')]"
                                }
                            }
                        ]
                    }
                }
            ]
            {{/if}}
        }
        
    ],
    "outputs": {}
}
