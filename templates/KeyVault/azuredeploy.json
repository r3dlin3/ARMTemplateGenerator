{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "keyVaultName": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "KeyVault name"
            }
        },
        "tenantId": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
              "description": "Tenant Id of the subscription. Get using Get-AzureRmSubscription cmdlet or Get Subscription API"
            }
        },
        {{#if grantRbacPermision}}
        "rbacPermissions": {
            "type": "array",
            "defaultValue": "{}",
            "metadata": {
                "description": "Array of permission object {\"objectId\":\"\",\"role\":{\"\"}}. Object Id of the AD user: get using Get-AzADUser or Get-AzADServicePrincipal cmdlets. For roles, see https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles."
            }
        },
        {{/if}}
        {{#unless isRbacEnabled}}
        "accessPolicies": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Access policies object {\"tenantId\":\"\",\"objectId\":\"\",\"permissions\":{\"keys\":[\"\"],\"secrets\":[\"\"]}}. Object Id of the AD user: get using Get-AzADUser or Get-AzADServicePrincipal cmdlets. Permissions to keys in the vault. Valid values are: all, create, import, update, get, list, delete, backup, restore, encrypt, decrypt, wrapkey, unwrapkey, sign, and verify."
            }
        },
        {{/unless}}
        {{#if isDiagnosticsEnabled}}
        "logsRetentionInDays": {
            "type": "int",
            "defaultValue": 0,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Specifies the number of days that logs are gonna be kept. If you do not want to apply any retention policy and retain data forever, set value to 0."
            }
        },
        "diagnosticStorageAccountName": {
           "type": "string",
           "metadata": {
                "description": "Storage account name for diagnostics"
            }
        },
        {{#unless existingStorage}}
        "storageAccountType": {
            "type": "string",
            "allowedValues": ["Standard_LRS", "Standard_GRS", "Premium_LRS", "Standard_RAGRS", "Standard_ZRS"],
            "metadata": {
                "description": "Type of storage account for VM diagnostics."
            }
        },
        {{/unless}}
        {{/if}}
        {{#if createSecret}}
        "secretsObject": {
            "type": "secureObject",
            "defaultValue": "{}",
            "metadata": {
                "description": "all secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object"
            }
        },
        {{/if}}
        "enableVaultForDeployment": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies if the vault is enabled for deployment by script or compute (VM, Service Fabric, ...)"
            }
        },
        "enableVaultForTemplateDeployment": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies if the vault is enabled for a template deployment"
            }
        },
        "enableVaultForDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
            }
        },
        {{#unless enablePurgeProtection}}
        "enableSoftDelete": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Specifies whether the 'soft delete' functionality is enabled for this key vault."
            }
        },
        {{/unless}}
        "vaultSku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Specifies the SKU for the vault"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": ""
            }
        }
    },
    "functions": [
        {{#if isRbacEnabled}}
        {{#if grantRbacPermision}}
        {

            "namespace": "kv",
            "members": {
                "roleId": {
                    "parameters": [
                        {
                            "name": "roleGuid",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', parameters('roleGuid'))]"
                    }
                }
            }
        }
        {{/if}}
        {{/if}}
    ],
    "variables": {
        {{#if isRbacEnabled}}
        {{#if grantRbacPermision}}
        "rolesId": {
            "Key Vault Administrator": "[kv.roleId('00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
            "Key Vault Certificates Officer": "[kv.roleId('a4417e6f-fecd-4de8-b567-7b0420556985')]",
            "Key Vault Crypto Officer": "[kv.roleId('14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
            "Key Vault Crypto Service Encryption User": "[kv.roleId('e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
            "Key Vault Crypto User": "[kv.roleId('12338af0-0e69-4776-bea7-57ae8d297424')]",
            "Key Vault Reader": "[kv.roleId('21090545-7ca7-4776-b22c-e363652d74d2')]",
            "Key Vault Secrets Officer": "[kv.roleId('b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
            "Key Vault Secrets User": "[kv.roleId('4633458b-17de-408a-b874-0445c86b69e6')]"
        }
        {{/if}}
        {{/if}}
    },
    "resources": [
        {{#if isDiagnosticsEnabled}}
        {{#unless existingStorage}}
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('diagnosticStorageAccountName')]",
            "apiVersion": "2016-12-01",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('storageAccountType')]"
            },
            "kind": "Storage",
            "tags": {
                "displayName": "concat('Key Vault ', parameters('keyVaultName'), ' diagnostics storage account')"
            },
            "properties": {}
        }{{#if isProtectWithLocks}},
        {
            "comments": "Resource lock on diagnostics storage account",
            "type": "Microsoft.Storage/storageAccounts/providers/locks",
            "name": "[concat(parameters('diagnosticStorageAccountName'), '/Microsoft.Authorization/storageDoNotDelete')]",
            "apiVersion": "2016-09-01",
            "properties": {
                "level": "CannotDelete"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('diagnosticStorageAccountName'))]"
            ]
        },
        {{/if}} {{!-- isProtectWithLocks  --}}
        {{/unless}} {{!-- existingStorage  --}}
        {{/if}} {{!-- isDiagnosticsEnabled  --}}
        {{#if isProtectWithLocks}}
        {
            "comments": "Resource lock on Key Vault",
            "type": "Microsoft.KeyVault/vaults/providers/locks",
            "name": "[concat(parameters('keyVaultName'), '/Microsoft.Authorization/keyVaultDoNotDelete')]",
            "apiVersion": "2016-09-01",
            "properties": {
                "level": "CannotDelete"
            },
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
            ]
        },
        {{/if}}
        {{#if createSecret}}
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/', parameters('secretsObject').secrets[copyIndex()].secretName)]",
            "apiVersion": "2015-06-01",
            "properties": {
                "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
            },
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
            ],
            "copy": {
                "name": "secretsCopy",
                "count": "[length(parameters('secretsObject').secrets)]"
            }
        },
        {{/if}}
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('keyVaultName')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "properties": {
                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                {{#if enablePurgeProtection}}
                "enableSoftDelete": true,
                "enablePurgeProtection": true,
                {{else}}
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                {{/if}}
                "tenantId": "[parameters('tenantId')]",
                {{#if isRbacEnabled}}
                "enableRbacAuthorization": true,
                {{else}}
                "accessPolicies": "[parameters('AccessPolicies')]",
                {{/if}}
                "sku": {
                    "name": "[parameters('vaultSku')]",
                    "family": "A"
                }
            }{{#if isDiagnosticsEnabled}},
            "resources": [
                {
                    "type": "Microsoft.KeyVault/vaults/providers/diagnosticsettings",
                    "name": "[concat(parameters('keyVaultName'), '/Microsoft.Insights/service')]",
                    "apiVersion": "2016-09-01",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"{{#unless existingStorage}},
                        "[concat('Microsoft.Storage/storageAccounts/', parameters('diagnosticStorageAccountName'))]"
                        {{/unless}}
                    ],
                    "properties": {
                        "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('diagnosticStorageAccountName'))]",
                        "logs": [
                            {
                                "category": "AuditEvent",
                                "enabled": true,
                                "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('LogsRetentionInDays')]"
                                }
                            }
                        ]
                    }
                }
            ]
            {{/if}}
        }{{#if grantRbacPermision}},
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[guid(resourceGroup().id, parameters('keyVaultName'), parameters('rbacPermissions')[copyIndex()].objectId)]",
            "scope": "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]",
            "dependsOn": [
                "[parameters('keyVaultName')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('rolesId')[parameters('rbacPermissions')[copyIndex()].role]]",
                "principalId": "[parameters('rbacPermissions')[copyIndex()].objectId]"
            },
            "copy": {
                "name": "permcopy",
                "count": "[length(parameters('rbacPermissions'))]"
            }
        }
        {{/if}}
    ],
    "outputs": {}
}
