{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "aksName": {
            "type": "string",
            "metadata": {
                "description": "Name of the AKS."
            }
        },
        "dnsPrefix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "osDiskSizeGB": {
            "type": "int",
            "defaultValue": 0,
            "minValue": 0,
            "maxValue": 1023,
            "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            }
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 3,
            "minValue": 1,
            "maxValue": 50,
            "metadata": {
                "description": "The number of nodes for the cluster."
            }
        },
        "agentVMSize": {
            "type": "string",
            "defaultValue": "Standard_DS2_v2",
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "maxPods": {
            "defaultValue": 30,
            "type": "int",
            "metadata": {
                "description": "Maximum number of pods that can run on a node."
            }
        },
        {{#if createCredentials}}
        "linuxAdminUsername": {
            "type": "string",
            "defaultValue": "azureuser",
            "metadata": {
                "description": "User name for the Linux Virtual Machines."
            }
        },
        "sshRSAPublicKey": {
            "type": "string",
            "metadata": {
                "description": "Configure all linux machines with the SSH RSA public key string. Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
            }
        },
        {{/if}}
        {{#if existingVNET}}
        "servicePrincipalObjectId": {
            "type": "string",
            "metadata": {
                "description": "Oject ID against which the Network Contributor roles will be assigned on the subnet"
            }
        },
        {{/if}}
        "servicePrincipalClientId": {
            "type": "string",
            "metadata": {
                "description": "Client ID (used by cloudprovider)"
            }
        },
        "servicePrincipalClientSecret": {
            "type": "securestring",
            "metadata": {
                "description": "The Service Principal Client Secret."
            }
        },
        "osType": {
            "type": "string",
            "defaultValue": "Linux",
            "allowedValues": [
                "Linux"
            ],
            "metadata": {
                "description": "The type of operating system."
            }
        },
        "kubernetesVersion": {
            "type": "string",
            "defaultValue": "1.14.6",
            "allowedValues": [
                "1.10.13",
                "1.11.10",
                "1.12.8",
                "1.13.10",
                "1.14.6"
            ],
            "metadata": {
                "description": "The version of Kubernetes."
            }
        },
        "enableHttpApplicationRouting": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "boolean flag to turn on and off of http application routing"
            }
        },
        "enableRBAC": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "boolean flag to turn on and off of RBAC"
            }
        },
        {{#if existingVNET}}
        "vnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of an existing VNET that will contain this AKS deployment."
            }
        },
        "vnetResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "Name of the existing VNET resource group"
            }
        },
        "subnetName": {
            "type": "string",
            "metadata": {
                "description": "Subnet name that will contain the App Service Environment"
            }
        },
        "networkPlugin": {
            "allowedValues": [
                "azure",
                "kubenet"
            ],
            "defaultValue": "azure",
            "type": "string",
            "metadata": {
                "description": "Network plugin used for building Kubernetes network."
            }
        },
        "serviceCidr": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign service cluster IPs."
            }
        },
        "dnsServiceIP": {
            "type": "string",
            "defaultValue": "10.0.0.10",
            "metadata": {
                "description": "Containers DNS server IP address."
            }
        },
        "dockerBridgeCidr": {
            "type": "string",
            "defaultValue": "172.17.0.1/16",
            "metadata": {
                "description": "A CIDR notation IP for Docker bridge."
            }
        },
        {{/if}}
        {{#if aadSupport}}
        "AADClientAppID": {
            "type": "string",
            "metadata": {
                "description": "The Application ID for the Client App Service Principal"
            }
        },
        "AADServerAppID": {
            "type": "securestring",
            "metadata": {
                "description": "The Application ID for the Server App Service Principal"
            }
        },
        "AADServerAppSecret": {
            "type": "securestring",
            "metadata": {
                "description": "The Service Principal Secret for the Client App Service Principal"
            }
        },
        "AADTenantID": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "The Azure AD Tenant where the cluster will reside"
            }
        },
        {{/if}}
        {{#if enableLogging}}
        "workspaceName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Log Analytics workspace"
            }
        },
        {{#unless createWorkspace}}
        "workspaceResourceGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group of the existing Log Analytics workspace"
            }
        },
        {{/unless}}
        {{/if}}
        {{#if useAcr}}
        {{#unless existingVNET}}
        "servicePrincipalObjectId": {
            "type": "string",
            "metadata": {
                "description": "Oject ID against which the Network Contributor roles will be assigned on the subnet"
            }
        },
        {{/unless}}
        "acrName": {
            "type": "string",
            "defaultValue": "[concat('acr', uniqueString(resourceGroup().id))]",
            "minLength": 5,
            "maxLength": 50,
            "metadata": {
                "description": "Globally unique name of your Azure Container Registry"
            }
        },
        {{#if createAcr}}
        "acrAdminUserEnabled": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable admin user that have push / pull permission to the registry."
            }
        },
        "acrSku": {
            "type": "string",
            "metadata": {
                "description": "Tier of your Azure Container Registry.  Geo replicatoin requires Premium SKU."
            },
            {{#if enableGeoReplication}}
            "defaultValue": "Premium",
            {{else}}
            "defaultValue": "Basic",
            {{/if}}
            "allowedValues": [
                {{#unless enableGeoReplication}}
                "Basic",
                "Standard",
                {{/unless}}
                "Premium"
            ]
        },
        {{#if enableGeoReplication}}
        "acrReplicaLocation": {
            "type": "string",
            "metadata": {
                "description": "Location for ACR replica"
            }
        },
        {{/if}}{{else}}
        "acrResourceGroup": {
            "defaultValue": "[resourceGroup().name]",
            "type": "string",
            "metadata": {
                "description": "Name of the resource group of the existing ACR"
            }
        },
        {{/if}}{{/if}}{{!-- End of useAcr--}}
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The region to deploy the resources into"
            }
        },
        "tagValues": {
            "type": "object",
            "defaultValue": {}
        }
    },
    "variables": {
        {{#if existingVNET}}
        "vnetSubnetId": "[resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets',parameters('vnetName'),parameters('subnetName'))]",
        {{/if}}
        {{#if enableLogging}}{{#unless createWorkspace}}
        "workspaceResourceId": "[resourceId(parameters('workspaceResourceGroup'), 'Microsoft.OperationalInsights/workspaces',parameters('workspaceName'))]",
        {{/unless}}{{/if}}
        "dnsPrefix": "[if(empty(parameters('dnsPrefix')),parameters('aksName'),parameters('dnsPrefix'))]"
    },
    "resources": [
        {{#if createWorkspace}}
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "name": "[parameters('workspaceName')]",
            "apiVersion": "2015-11-01-preview",
            "location": "[parameters('location')]",
            "properties": {
                "features": {
                    "searchVersion": 1
                }
            }
        },
        {{/if}}
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "name": "[parameters('aksName')]",
            "apiVersion": "2018-03-31",
            "location": "[parameters('location')]",
            "tags": {},
            "dependsOn": [
                {{#if enableLogging}}{{#if createWorkspace}}
                "[parameters('workspaceName')]"{{#if existingVNET}},{{/if}}
                {{/if}}{{/if}}
                {{#if existingVNET}}
                "ClusterSubnetRoleAssignmentDeployment"
                {{/if}}
            ],
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "enableRBAC": "[parameters('enableRBAC')]",
                "dnsPrefix": "[variables('dnsPrefix')]",
                {{#if aadSupport}}
                "aadProfile": {
                    "clientAppID": "[parameters('AADClientAppID')]",
                    "serverAppID": "[parameters('AADServerAppID')]",
                    "tenantID": "[parameters('AADTenantID')]",
                    "serverAppSecret": "[parameters('AADServerAppSecret')]"
                },
                {{/if}}
                "addonProfiles": {
                    {{#if enableLogging}}
                    "omsagent": {
                        "enabled": true,
                        "config": {
                            {{#if createWorkspace}}
                            "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces',parameters('workspaceName'))]"
                            {{else}}
                            "logAnalyticsWorkspaceResourceID": "[variables('workspaceResourceId')]"
                            {{/if}}
                        }
                    },
                    {{/if}}
                    "httpApplicationRouting": {
                        "enabled": "[parameters('enableHttpApplicationRouting')]"
                    }
                },
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "count": "[parameters('agentCount')]",
                        "vmSize": "[parameters('agentVMSize')]",
                        "osType": "[parameters('osType')]",
                        "storageProfile": "ManagedDisks",
                        {{#if existingVNET}}
                        "vnetSubnetID": "[variables('vnetSubnetID')]",
                        {{/if}}
                        "maxPods": "[parameters('maxPods')]"
                    }
                ],
                {{#if createCredentials}}
                "linuxProfile": {
                    "adminUsername": "[parameters('linuxAdminUsername')]",
                    "ssh": {
                        "publicKeys": [
                            {
                                "keyData": "[parameters('sshRSAPublicKey')]"
                            }
                        ]
                    }
                },
                {{/if}}
                {{#if existingVNET}}
                "networkProfile": {
                    "networkPlugin": "[parameters('networkPlugin')]",
                    "serviceCidr": "[parameters('serviceCidr')]",
                    "dnsServiceIP": "[parameters('dnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
                },
                {{/if}}
                "servicePrincipalProfile": {
                    "clientId": "[parameters('servicePrincipalClientId')]",
                    "secret": "[parameters('servicePrincipalClientSecret')]"
                }
            }
        }{{#if existingVNET}},
        {
            "type": "Microsoft.Resources/deployments",
            "name": "ClusterSubnetRoleAssignmentDeployment",
            "apiVersion": "2017-05-10",
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroup": "[parameters('vnetResourceGroup')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworks/subnets/providers/roleAssignments",
                            "apiVersion": "2017-05-01",
                            "name": "[concat(parameters('vnetName'), '/', parameters('subnetName'), '/Microsoft.Authorization/', guid(resourceGroup().id, deployment().name))]",
                            "properties": {
                                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                "principalId": "[parameters('servicePrincipalObjectId')]",
                                "scope": "[variables('vnetSubnetId')]"
                            }
                        }
                    ]
                }
            }
        }{{/if}}{{#if useAcr}}{{#if createAcr}},
        {
            "name": "[parameters('acrName')]",
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2017-10-01",
            "location": "[parameters('location')]",
            "comments": "Container registry for storing docker images",
            "sku": {
                "name": "[parameters('acrSku')]",
                "tier": "[parameters('acrSku')]"
            },
            "properties": {
                "adminUserEnabled": "[parameters('acrAdminUserEnabled')]"
            }
        },
        {
            "name": "[concat(parameters('acrName'), '/Microsoft.Authorization/', guid(resourceGroup().id, parameters('acrName'), parameters('aksName')))]",
            "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "dependsOn": [
                "[parameters('acrName')]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalId": "[parameters('servicePrincipalObjectId')]"
            }
        }{{#if enableGeoReplication}},
        {
            "name": "[concat(parameters('acrName'), '/', parameters('acrReplicaLocation'))]",
            "type": "Microsoft.ContainerRegistry/registries/replications",
            "apiVersion": "2017-10-01",
            "location": "[parameters('acrReplicaLocation')]",
            "properties": {},
            "dependsOn": [
                "[parameters('acrName')]"
            ]
        }{{/if}}{{else}},
        {
            "type": "Microsoft.Resources/deployments",
            "name": "ClusterAcrRoleAssignmentDeployment",
            "apiVersion": "2019-08-01",
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroup": "[parameters('acrResourceGroup')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[concat(parameters('acrName'), '/Microsoft.Authorization/', guid(resourceGroup().id, parameters('acrName'), parameters('aksName')))]",
                            "properties": {
                                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                                "principalId": "[parameters('servicePrincipalObjectId')]"
                            }
                        }
                    ]
                }
            }
        }
        {{/if}}{{/if}}{{!-- End of useAcr--}}
    ],
    "outputs": {
        {{#if useAcr}}
        {{#if createAcr}}
        "acrLoginServer": {
            "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries',parameters('acrName')),'2017-10-01').loginServer]",
            "type": "string"
        },
        {{/if}}
        {{/if}}
        "controlPlaneFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('aksName'))).fqdn]"
        }
    }
}