{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sqlServerName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The name of the server."
      }
    },
    {{#unless existingServer}}
    "sqlServerAdminLogin": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The SQL server admin username."
      }
    },
    "sqlServerAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The SQL server admin password"
      }
    },
    {{#if enableFirewall}}
    "firewallRules": {
      "type": "array",
      "metadata": {
        "description": "Array of firewall rules (JSON object) with firewallRulesName, firewallRulesStartIpAddress and firewallRulesEndIpAddress"
      }
    },
    "allowAzureIps": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Allow access from Azure services"
      }
    },
    {{/if}}
    {{#if enableServiceEndpoint}}
    "vnetName": {
      "type": "string",
      "metadata": {
            "description": "Name of the new or existing VNET"
        }
    },
    "subnetName": {
        "type": "string",
        "metadata": {
            "description": "Name of the new or existing subnet"
        }
    },
    "vnetResourceGroup": {
        "type": "string",
        "defaultValue" : "[resourceGroup().name]",
        "metadata": {
            "description": "Resource group of the new or existing VNET"
        }
    },
    {{/if}}
    {{#if enableAudit}}
    "auditStorageAccountName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "Storage account for audit logs"
      }
    },
    "auditRetentionDays": {
      "type": "string",
      "defaultValue": "0",
      "metadata": {
        "description": "Specifies the number of days to keep in the audit logs."
      }
    },
    {{#if existingStorage}}
    "auditStorageAccountResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "The resource group of the existing storage account."
      }
    },
    {{else}}
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Premium_LRS",
        "Standard_RAGRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Type of storage account for VM diagnostics."
      }
    },
    {{/if}}
    {{/if}}
    {{/unless}} {{!-- existingServer --}}
    {{#if createDB}}
    "sqlDatabaseName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The SQL database name"
      }
    },
    "sqlDatabaseCollation": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
      "metadata": {
        "description": "The SQL database collation"
      }
    },
    "sqlDatabaseEdition": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "The SQL database edition"
      }
    },
    "sqlDatabaseMaxSizeBytes": {
      "type": "string",
      "defaultValue": "2147483648",
      "metadata": {
        "description": "The SQL Databse max size"
      }
    },
    "sqldatabaseRequestedServiceObjectiveName": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Free",
        "Basic",
        "S0",
        "S1",
        "S2",
        "S3",
        "S4",
        "S6",
        "S7",
        "S9",
        "S12",
        "P1",
        "P2",
        "P3",
        "P4",
        "P6",
        "P11",
        "P15",
        "PRS1",
        "PRS2",
        "PRS4",
        "PRS6"
      ],
      "metadata": {
        "description": "Describes the performance level for Edition"
      }
    },
    {{/if}}
    "sqlBackupRetentionDays": {
      "type": "int",
      "defaultValue": 7,
      "metadata": {
        "description": "The backup retention period in days. This is how many days Point-in-Time Restore will be supported."
      }
    },
    {{#if enableLTR}}
    "sqlBackupLTRpolicy": {
      "type": "object",
      "defaultValue": {
        "weeklyRetention": "P6W",
        "monthlyRetention": null,
        "yearlyRetention": null,
        "weekOfYear": null
      },
      "metadata": {
        "description": "The retention policy for weekly, monthly and yearly backup."
      }
    },
    {{/if}}
    {{#if enableAAD}}
    "aadAdminLogin": {
      "type": "string",
      "metadata": {
        "description": "UPN of Azure AD Admin"
      }
    },
    "aadAdminObjectId": {
      "type": "string",
      "metadata": {
        "description": "objectId of Azure AD Admin"
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Tenant Id of the subscription."
      }
    },
    {{/if}}
    "tags": {
      "type": "object",
      "defaultValue": {}
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region to deploy the resources into"
      }
    }
  },
  "variables": {
    "sqlApiVersion": "2015-05-01-preview"{{#if enableServiceEndpoint}},
    "vnetID": "[resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks',parameters('vnetName'))]"
    {{/if}}
  },
  "resources": [
    {{#if enableAudit}}
    {{#unless existingStorage}}
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "StorageV2",
      "name": "[parameters('auditStorageAccountName')]",
      "apiVersion": "2018-02-01",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {{/unless}}
    {
      "type": "Microsoft.Sql/servers/auditingSettings",
      "name": "[concat(parameters('sqlServerName'), '/Default')]",
      "apiVersion": "2017-03-01-preview",
      "location": "[parameters('location')]",
      "properties": {
        "State": "Enabled",
        "storageAccountName" : "[parameters('auditStorageAccountName')]",
        "storageEndpoint": "[concat('https://',parameters('storageName'),'.blob.core.windows.net')]",
        "storageAccountResourceGroupName": "[parameters('auditStorageAccountResourceGroup')]",
        "storageAccountSubscriptionId": "[subscription().subscriptionId]",
        "storageAccountAccessKey": "[listKeys(resourceId(parameters('storageAccountResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('storageName')), '2015-05-01-preview').key1]",        "storageAccountSubscriptionId": "[subscription().id]",
        "retentionDays": "[parameters('auditRetentionDays')]",
        "isStorageSecondaryKeyInUse": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"{{#unless existingStorage}},
        "[concat('Microsoft.Storage/storageAccounts/', parameters('auditStorageAccountName'))]"
        {{/unless}}
      ]
    },{{/if}}
    {{#unless existingServer}}
    {
      "name": "[parameters('sqlServerName')]",
      "type": "Microsoft.Sql/servers",
      "apiVersion": "[variables('sqlApiVersion')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "administratorLogin": "[parameters('sqlServerAdminLogin')]",
        "administratorLoginPassword": "[parameters('sqlServerAdminPassword')]",
        "version": "12.0"
      }
    },
    {{#if enableAAD}}
    {
      "name": "[concat(parameters('sqlServerName'), '/activeDirectory')]",
      "type": "Microsoft.Sql/servers/administrators",
      "apiVersion": "2014-04-01",
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
      ],
      "properties": {
        "administratorType": "ActiveDirectory",
        "login": "[parameters('aadAdminLogin')]",
        "sid": "[parameters('aadAdminObjectId')]",
        "tenantId": "[parameters('tenantId')]"
      }
    },{{/if}}
    {{/unless}}
    {{#if createDB}}
    {
      "name": "[concat(parameters('sqlServerName'),'/',parameters('sqlDatabaseName'))]",
      "type": "Microsoft.Sql/servers/databases",
      "location": "[parameters('location')]",
      "apiVersion": "2014-04-01",
      {{#unless existingServer}}
      "dependsOn": [
        "[parameters('sqlServerName')]"
      ],
      {{/unless}}
      "tags": "[parameters('tags')]",
      "properties": {
        "collation": "[parameters('sqlDatabaseCollation')]",
        "edition": "[parameters('sqlDatabaseEdition')]",
        "maxSizeBytes": "[parameters('sqlDatabaseMaxSizeBytes')]",
        "requestedServiceObjectiveName": "[parameters('sqldatabaseRequestedServiceObjectiveName')]"
      }
    },
    {
      "name": "[concat(parameters('sqlServerName'),'/',parameters('sqlDatabaseName'),'/default')]",
      "type": "Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies",
      "apiVersion": "2017-10-01-preview",
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'), '/databases/', parameters('sqlDatabaseName'))]"
      ],
      "properties": {
        "retentionDays": "[parameters('sqlBackupRetentionDays')]"
      }
    },{{#if enableLTR}}
    {
      "name": "[concat(parameters('sqlServerName'),'/',parameters('sqlDatabaseName'),'/default')]",
      "type": "Microsoft.Sql/servers/databases/backupLongTermRetentionPolicies",
      "dependsOn": [
        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'), '/databases/', parameters('sqlDatabaseName'))]"
      ],
      "apiVersion": "2017-03-01-preview",
      "properties": "[parameters('sqlBackupLTRpolicy')]"
    },
    {{/if}}
    {{/if}}{{#if enableFirewall}}
    {
      "apiVersion": "[variables('sqlApiVersion')]",
      "name": "[concat(parameters('sqlServerName'), '/AllowAllWindowsAzureIps')]",
      "condition": "[equals(parameters('allowAzureIps'),'Enabled')]",
      "type": "Microsoft.Sql/servers/firewallRules",
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
      ]
    },
    {
      "apiVersion": "[variables('sqlApiVersion')]",
      "name": "[concat(parameters('sqlServerName'), '/', parameters('firewallRules')[copyIndex()].firewallRulesName)]",
      "type": "Microsoft.Sql/servers/firewallRules",
      "properties": {
        "startIpAddress": "[parameters('firewallRules')[copyIndex()].firewallRulesStartIpAddress]",
        "endIpAddress": "[parameters('firewallRules')[copyIndex()].firewallRulesEndIpAddress]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
      ],
      "copy": {
        "name": "fwrulecopy",
        "count": "[length(parameters('firewallRules'))]"
      }
    }
    {{else}}
    {
      "apiVersion": "[variables('sqlApiVersion')]",
      "name": "[concat(parameters('sqlServerName'), '/All')]",
      "type": "Microsoft.Sql/servers/firewallRules",
      "properties": {
        "firewallRulesName": "All",
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "255.255.255.255"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
      ]
    }{{/if}}{{#if enableServiceEndpoint}},
    {
      "type": "Microsoft.Sql/servers/virtualNetworkRules",
      "apiVersion": "[variables('sqlApiVersion')]",
      "name": "[concat(parameters('sqlServerName'), '/', parameters('subnetName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
      ],
      "properties": {
        "virtualNetworkSubnetId": "[concat(variables('vnetID'), '/subnets/', parameters('subnetName'))]",
        "ignoreMissingVnetServiceEndpoint": true
      }
    },
    {{/if}}
  ],
  "outputs": {
    "databaseServerFQDN" : {
      "type" : "string",
      "value": "[reference(parameters('sqlServerName')).fullyQualifiedDomainName]"
    }{{#if createDB}},
    "databaseName" : {
        "type" : "string",
        "value": "[parameters('sqlDatabaseName')]"
    }{{/if}}
  }
}
